var tipuesearch = {"pages": [{'title': 'About', 'text': '國立虎尾科技大學機械設計工程系 \n National Formosa University \n Department of Mechanical Design Engineering \n cp2024 計算機程式 \n 課程教材: \n Learn Python with Jupyter  ( site ,  ebook ) \n 教育版帳號\xa0microsoftonline 登入點:\xa0 https://login.microsoftonline.com/ \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入  https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼: fqpabi8 \n 個人倉儲:  https://github.com/mdecp2024/hw-wlison888 \xa0 \n 個人網站:\xa0 https://mdecp2024.github.io/hw-wlison888/ \n 其他資訊: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': 'About.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': '\n', 'tags': '', 'url': 'w7.html'}, {'title': 'w10', 'text': '題目一: \n \n \n \n 題目二: \n \n \n \n 題目三: \n 心得: 我覺得用我覺得用五種方法執行來解微積分和物理是十分有趣的我覺得用Jupyter和brython比較輕鬆沒有比較複雜的操作,而學習到的可以應用在物理和微積分上來解不會題目 \n \n 題目一: \n import math\n\n# 設定區域大小\nsize = 10\nradius = 3  # 圓的半徑\ncenter = (size // 2, size // 2)  # 圓心位置在 5,5\n\n# 創建 10x10 的字元區域\ngrid = [[\' \' for _ in range(size)] for _ in range(size)]\n\n# 在區域中畫圓\nfor y in range(size):\n    for x in range(size):\n        # 計算每個點到圓心的距離\n        distance = math.sqrt((x - center[0])**2 + (y - center[1])**2)\n        if abs(distance - radius) <= 0.5:  # 判斷點是否在圓周上\n            grid[y][x] = \'*\'\n\n# 顯示結果\nfor row in grid:\n    print(\'\'.join(row))\n \n 第二題 \n from browser import html\nfrom browser import document as doc\n\n# 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 每一格的 pixel 數\ngs = 20\n\n# canvas context\nctx = canvas.getContext("2d")\n\n# 定義繪製矩形的函數\ndef dRect(lux, luy, w, h, s=1, c="lightgrey"):\n    ctx.lineWidth = s\n    ctx.strokeStyle = c\n    ctx.beginPath()\n    ctx.rect(lux, luy, w, h)\n    ctx.stroke()\n\n# 繪製網格\ndef grid(width, height, grid_pix):\n    for i in range(width):\n        for j in range(height):\n            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")\n\n# 填滿指定格子\ndef fill(x, y, color):\n    ctx.fillStyle = color\n    ctx.fillRect((x - 1) * gs, (y - 1) * gs, gs, gs)\n\n# 判斷是否在圓形範圍內\ndef is_in_circle(cx, cy, x, y, r):\n    return ((x - cx) ** 2 + (y - cy) ** 2) <= r ** 2\n\n# 圓形繪製\ndef draw_circle(grid_size, radius):\n    center = (grid_size // 2) + 0.5  # 圓心位於中心\n    for i in range(1, grid_size + 1):\n        for j in range(1, grid_size + 1):\n            # 檢查格子中心點是否在圓內\n            if is_in_circle(center, center, i, j, radius):\n                fill(i, j, "black")\n\n# 主程式\ngrid(10, 10, gs)\ndraw_circle(10, 5)  # 圓的半徑為 4.5 \n \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '\n \n 第一題 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n \n \n \n import   math \n \xa0 \n # 設定區域大小 \n size  =   10 \n radius  =   3 \xa0  # 圓的半徑 \n center  =   (size  / /   2 , size  / /   2 )\xa0  # 圓心位置在 5,5 \n \xa0 \n # 創建 10x10 的字元區域 \n grid  =   [[ \' \'   for   _  in   range (size)]  for   _  in   range (size)] \n \xa0 \n # 在區域中畫圓 \n for   y  in   range (size): \n \xa0\xa0\xa0\xa0 for   x  in   range (size): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 計算每個點到圓心的距離 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 distance  =   math.sqrt((x  -   center[ 0 ]) * * 2   +   (y  -   center[ 1 ]) * * 2 ) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   abs (distance  -   radius) < =   0.5 :\xa0  # 判斷點是否在圓周上 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 grid[y][x]  =   \'*\' \n \xa0 \n # 顯示結果 \n for   row  in   grid: \n \xa0\xa0\xa0\xa0 print (\'\'.join(row)) \n \n \n \n \n \n \n \n 第二題 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n 9 \n 10 \n 11 \n 12 \n 13 \n 14 \n 15 \n 16 \n 17 \n 18 \n 19 \n 20 \n 21 \n 22 \n 23 \n 24 \n 25 \n 26 \n 27 \n 28 \n 29 \n 30 \n 31 \n 32 \n 33 \n 34 \n 35 \n 36 \n 37 \n 38 \n 39 \n 40 \n 41 \n 42 \n 43 \n 44 \n 45 \n 46 \n 47 \n 48 \n 49 \n \n \n \n from   browser  import   html \n from   browser  import   document as doc \n \xa0 \n # 建立 canvas 超文件物件 \n canvas  =   html.CANVAS(width = 400 , height = 400 ) \n brython_div  =   doc[ "brython_div1" ] \n brython_div < =   canvas \n \xa0 \n # 每一格的 pixel 數 \n gs  =   20 \n \xa0 \n # canvas context \n ctx  =   canvas.getContext( "2d" ) \n \xa0 \n # 定義繪製矩形的函數 \n def   dRect(lux, luy, w, h, s = 1 , c = "lightgrey" ): \n \xa0\xa0\xa0\xa0 ctx.lineWidth  =   s \n \xa0\xa0\xa0\xa0 ctx.strokeStyle  =   c \n \xa0\xa0\xa0\xa0 ctx.beginPath() \n \xa0\xa0\xa0\xa0 ctx.rect(lux, luy, w, h) \n \xa0\xa0\xa0\xa0 ctx.stroke() \n \xa0 \n # 繪製網格 \n def   grid(width, height, grid_pix): \n \xa0\xa0\xa0\xa0 for   i  in   range (width): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   j  in   range (height): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 dRect(i  *   grid_pix, j  *   grid_pix, grid_pix, grid_pix,  1 ,  "lightgrey" ) \n \xa0 \n # 填滿指定格子 \n def   fill(x, y, color): \n \xa0\xa0\xa0\xa0 ctx.fillStyle  =   color \n \xa0\xa0\xa0\xa0 ctx.fillRect((x  -   1 )  *   gs, (y  -   1 )  *   gs, gs, gs) \n \xa0 \n # 判斷是否在圓形範圍內 \n def   is_in_circle(cx, cy, x, y, r): \n \xa0\xa0\xa0\xa0 return   ((x  -   cx)  * *   2   +   (y  -   cy)  * *   2 ) < =   r  * *   2 \n \xa0 \n # 圓形繪製 \n def   draw_circle(grid_size, radius): \n \xa0\xa0\xa0\xa0 center  =   (grid_size  / /   2 )  +   0.5 \xa0  # 圓心位於中心 \n \xa0\xa0\xa0\xa0 for   i  in   range ( 1 , grid_size  +   1 ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 for   j  in   range ( 1 , grid_size  +   1 ): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 # 檢查格子中心點是否在圓內 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 if   is_in_circle(center, center, i, j, radius): \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fill(i, j,  "black" ) \n \xa0 \n # 主程式 \n grid( 10 ,  10 , gs) \n draw_circle( 10 ,  5 )\xa0  # 圓的半徑為 4.5 \n \n \n \n \n \n \n \n \n 11月27號\xa0 \n 第一題\xa0 \n \n \n \n \n \n \n 1 \n 2 \n 3 \n 4 \n 5 \n 6 \n 7 \n 8 \n \n \n \n n  =   11   \u3000 # 總共的行數 \n space  = \u3000 \'_\' \n center  = n / / 2 \n #print(center) \n \xa0 \n for   y  in   range (n): \n \xa0\xa0\xa0\xa0 for   x  in   range (n) \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 print ( "(" ,ｘ,＂,＂,ｙ,＂）＂,ｓｅｐ＝＂＂） \n \n \n \n \n \n 第二題 \n \n \n from browser import html\nfrom browser import document as doc\n \n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width = 400, height = 400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \n# 每一格的 pixel 數\ngs = 20\n \n#gs*tc = canvas width and height\n \nctx = canvas.getContext("2d")\nwidth = 11\nheight = 11\n \n \nfor i in range(width):\n     for j in range(height):\n        #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n         ctx.lineWidth = 1\n         ctx.strokeStyle = \'red\'\n         ctx.beginPath();\n         ctx.rect(i*gs,j*gs,gs,gs)\n         ctx.stroke();\n \nfrom browser import html\nfrom browser import document as doc\n \n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width = 400, height = 400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \n# 每一格的 pixel 數\ngs = 20\n \n#gs*tc = canvas width and height\n \nctx = canvas.getContext("2d")\nwidth = 11\nheight = 11\n \n \nfor i in range(width):\n     for j in range(height):\n        #dRect(i*gs, j*gs, gs, gs, 1, "lightgrey")\n         ctx.lineWidth = 1\n         ctx.strokeStyle = \'red\'\n         ctx.beginPath();\n         ctx.rect(i*gs,j*gs,gs,gs)\n         ctx.stroke();\n \n \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w13_hw', 'text': '一個格子 \n 兩個格子 \n 塗滿顏色的兩個格子 \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_ex', 'text': '多個圓相交區域著色 \n', 'tags': '', 'url': 'w14_ex.html'}, {'title': 'w15', 'text': '! 從 1 累加到 100 \n 2 addto(1,100) \n 3 ad_only_evend \n \n \n add_only_even(init, upto)  函數： \n \n init  是開始的數字， upto  是結束的數字。 \n 函數會從  init  到  upto  檢查每個數字，並且只累加偶數。 \n \n \n \n for  迴圈用來檢查每個數字是否為偶數 ( i % 2 == 0 )，如果是，則加到  total  中。 \n \n \n 最後，回傳總和並顯示出來。\xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \n \n \n 4 add_avoid_8 \n \n addto(init, upto)  函數：\n \n 使用  for  迴圈遍歷從  init  到  upto  之間的每一個數字。 \n 每次迴圈檢查數字的尾數是否為  8 ，如果是，就把這個數字加到總和  total  中。 \n \n \n 最後返回計算出的總和。 \n \n \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'HW2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': 'w16_exam1 \n 影片 \n \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};